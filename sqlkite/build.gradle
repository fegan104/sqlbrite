apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'signing'

dependencies {
    api rootProject.ext.kotlinStdLib
    api rootProject.ext.kotlinCoroutines
    api rootProject.ext.supportSqlite
    implementation rootProject.ext.supportAnnotations

    androidTestImplementation 'app.cash.turbine:turbine:0.7.0'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2'
    androidTestImplementation 'androidx.test:core-ktx:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation rootProject.ext.supportTestRunner
    androidTestImplementation rootProject.ext.truth
    androidTestImplementation rootProject.ext.supportSqliteFramework


    lintChecks project(':sqlkite-lint')
}

android {
    namespace = "com.frankegan.sqlkite"

    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/ASL2.0', 'META-INF/LGPL2.1']
        }
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }

    buildFeatures {
        buildConfig = false
    }
}

tasks.named("dokkaHtml") {
    outputDirectory.set(new File(rootDir.path + "/docs/"))
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = "com.frankegan"
                artifactId = "sqlkite"
                version = VERSION_NAME
                from components.release

                pom {
                    name = "SQL Kite"
                    description = "A lightweight Kotlin library that makes working with SupportSQLiteOpenHelper & ContentResolver a breeze by introducing reactive Flow based queries."
                    url = "https://github.com/fegan104/sqlkite"
                    inceptionYear = "2021"

                    signing {
                        useGpgCmd()
                        sign publishing.publications.release
                    }

                    licenses {
                        license {
                            name = "Apache-2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }

                    developers {
                        developer {
                            id = "frankegan"
                            name = "Frank Egan"
                            email = "fegan104@gmail.com"
                        }
                    }

                    scm {
                        connection = 'scm:git:git:github.com/fegan104/sqlkite.git'
                        developerConnection = 'scm:git:ssh://github.com/fegan104/sqlkite.git'
                        url = 'https://github.com/fegan104/sqlkite'
                    }
                }
            }
        }

        repositories {
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }
}
