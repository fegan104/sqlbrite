plugins {
  id 'com.android.application'
  id 'kotlin-android'
  id 'kotlin-kapt'
  id 'dagger.hilt.android.plugin'
  id 'kotlin-parcelize'
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file('keystore.properties')

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

dependencies {
  implementation rootProject.ext.supportAnnotations
  implementation rootProject.ext.viewModel
  implementation "androidx.fragment:fragment-ktx:1.4.0"
  implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0"
  implementation rootProject.ext.hilt
  kapt rootProject.ext.hiltCompiler

  implementation rootProject.ext.timber

  implementation project(':sqlkite')
  implementation rootProject.ext.supportSqliteFramework
}

android {
  compileSdkVersion versions.compileSdk

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }


    defaultConfig {
    minSdkVersion versions.minSdk
    targetSdkVersion versions.compileSdk
    applicationId 'com.example.sqlkite.todo'

    versionCode 1
    versionName '1.0'
  }

  signingConfigs {
    signingConfigs {
      release {
        keyAlias keystoreProperties['keyAlias']
        keyPassword keystoreProperties['keyPassword']
        storeFile file(System.getProperty("user.home") + keystoreProperties['storeFile'])
        storePassword keystoreProperties['storePassword']
      }
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.development'
      signingConfig signingConfigs.debug
    }
  }
    lint {
        ignore 'InvalidPackage'
        textOutput file('stdout')
        textReport true
    }
}
